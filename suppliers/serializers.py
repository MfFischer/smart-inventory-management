from marshmallow import Schema, fields, validate, validates, ValidationError
from suppliers.models import Supplier


class SupplierSchema(Schema):
    """Schema for validating and serializing Supplier data."""
    # Field definitions with validations
    id = fields.Int(dump_only=True)  # Read-only field, auto-generated by the database
    name = fields.Str(
        required=True,
        validate=validate.Length(min=1, max=255)
    )  # Required field, name should be between 1 to 255 characters
    email = fields.Email(
        required=True
    )  # Required email field
    phone = fields.Str(
        validate=validate.Length(max=20)
    )  # Optional phone field, max length of 20 characters
    address = fields.Str(
        validate=validate.Length(max=500)
    )  # Optional address field, max length of 500 characters
    created_at = fields.DateTime(dump_only=True)  # Read-only field, auto-generated timestamp
    updated_at = fields.DateTime(dump_only=True)  # Read-only field, auto-updated timestamp

    @validates('email')
    def validate_email(self, value):
        """Validate that the email is unique within the Supplier model."""
        # Check for an existing supplier with the same email address
        if Supplier.query.filter_by(email=value).first():
            raise ValidationError("A supplier with this email already exists.")
